<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="910" height="566" viewBox="0 0 910 566">
  <defs>
    <filter id="Frame_236" x="0" y="0" width="910" height="566" filterUnits="userSpaceOnUse">
      <feOffset dy="2" input="SourceAlpha"/>
      <feGaussianBlur stdDeviation="2" result="blur"/>
      <feFlood flood-opacity="0.051"/>
      <feComposite operator="in" in2="blur"/>
      <feComposite in="SourceGraphic"/>
    </filter>
  </defs>
  <g id="Frame_236-2" data-name="Frame 236" transform="translate(6 4)">
    <g transform="matrix(1, 0, 0, 1, -6, -4)" filter="url(#Frame_236)">
      <rect id="Frame_236-3" data-name="Frame 236" width="898" height="554" rx="3" transform="translate(6 4)" fill="#fff"/>
    </g>
    <g id="Frame_238" data-name="Frame 238" transform="translate(24 24)">
      <g id="Frame_238-2" data-name="Frame 238">
        <rect id="Frame_238-3" data-name="Frame 238" width="50" height="26" rx="3" fill="#5d64d2"/>
        <text id="RUST" transform="translate(8 6)" fill="#fff" font-size="12" font-family="SegoeUI-Bold, Segoe UI" font-weight="700"><tspan x="0" y="13">RUST</tspan></text>
      </g>
      <text id="let_engine_Engine::new_context_parameters_local_docker_initialize_Docker_as_a_Build_Platform_ecr_initialize_Elastic_Container_Registry_aws_initialize_AWS_account_cloudflare_initialize_Cloudflare_as_DNS_Nameservers_let_session_match_engine.session_Ok_session_session_get_the_session_Err_config_error_panic_configuration_error_:_config_error_let_mut_tx_session.transaction_create_EKS_AWS_managed_Kubernetes_cluster_tx.create_kubernetes_eks_create_the_infrastructure_and_wait_for_the_result_match_tx.commit_TransactionResult::Ok_println_OK_TransactionResult::Rollback_commit_err_println_ERROR_but_rollback_OK_TransactionResult::UnrecoverableError_commit_err_rollback_err_println_FATAL_ERROR_" data-name="let engine = Engine::new( context, // parameters local_docker, // initialize Docker as a Build Platform ecr, // initialize Elastic Container Registry aws, // initialize AWS account cloudflare, // initialize Cloudflare as DNS Nameservers ); let session = match engine.session() { Ok(session) =&gt; session, // get the session Err(config_error) =&gt; panic!(&quot;configuration error {:?}&quot;, config_error), }; let mut tx = session.transaction(); // create EKS (AWS managed Kubernetes cluster) tx.create_kubernetes(&amp;eks); // create the infrastructure and wait for the result match tx.commit() { TransactionResult::Ok =&gt; println!(&quot;OK&quot;), TransactionResult::Rollback(commit_err) =&gt; println!(&quot;ERROR but rollback OK&quot;), TransactionResult::UnrecoverableError(commit_err, rollback_err) =&gt; println!(&quot;FATAL ERROR&quot;) };" transform="translate(0 50)" fill="#5d64d2" font-size="15" font-family="Hack-Regular, Hack"><tspan x="0" y="15">let</tspan><tspan y="15" xml:space="preserve" fill="#454658"> engine </tspan><tspan y="15" fill="#b160f0">=</tspan><tspan y="15" xml:space="preserve" fill="#454658"> Engine::new(</tspan><tspan fill="#454658"><tspan x="0" y="34" xml:space="preserve">    context, </tspan><tspan y="34" fill="#a8a8c1">// parameters</tspan><tspan x="0" y="53" xml:space="preserve">    local_docker, </tspan><tspan y="53" fill="#a8a8c1">// initialize Docker as a Build Platform</tspan><tspan x="0" y="72" xml:space="preserve">    ecr, </tspan><tspan y="72" fill="#a8a8c1">// initialize Elastic Container Registry</tspan><tspan x="0" y="91" xml:space="preserve">    aws, </tspan><tspan y="91" fill="#a8a8c1">// initialize AWS account</tspan><tspan x="0" y="110" xml:space="preserve">    cloudflare, </tspan><tspan y="110" fill="#a8a8c1">// initialize Cloudflare as DNS Nameservers</tspan><tspan x="0" y="129">);</tspan><tspan x="0" y="148"></tspan></tspan><tspan x="0" y="167">let</tspan><tspan y="167" xml:space="preserve" fill="#454658"> session </tspan><tspan y="167" fill="#b160f0">=</tspan><tspan y="167" fill="#454658"> </tspan><tspan y="167">match</tspan><tspan y="167" xml:space="preserve" fill="#454658"> engine.</tspan><tspan y="167" fill="#ff6240">session()</tspan><tspan y="167" xml:space="preserve" fill="#454658"> {</tspan><tspan fill="#454658"><tspan x="0" y="186" xml:space="preserve">    </tspan><tspan y="186" fill="#43c9d5">Ok</tspan><tspan y="186">(session) </tspan><tspan y="186" fill="#b160f0">=&gt;</tspan><tspan y="186" xml:space="preserve"> session, </tspan><tspan y="186" fill="#a8a8c1">// get the session</tspan><tspan x="0" y="205" xml:space="preserve">    </tspan><tspan y="205" fill="#43c9d5">Err</tspan><tspan y="205">(config_error) </tspan><tspan y="205" fill="#b160f0">=&gt;</tspan><tspan y="205"> </tspan><tspan y="205" fill="#43c9d5">panic!</tspan><tspan y="205">(&quot;</tspan><tspan y="205" fill="#4548b0">configuration error {:?}</tspan><tspan y="205">&quot;, config_error),</tspan><tspan x="0" y="224">};</tspan><tspan x="0" y="243"></tspan></tspan><tspan x="0" y="262">let mut</tspan><tspan y="262" xml:space="preserve" fill="#454658"> tx </tspan><tspan y="262" fill="#b160f0">=</tspan><tspan y="262" xml:space="preserve" fill="#454658"> session.</tspan><tspan y="262" fill="#ff6240">transaction()</tspan><tspan y="262" fill="#454658">;</tspan><tspan fill="#454658"><tspan x="0" y="281"></tspan></tspan><tspan fill="#a8a8c1"><tspan x="0" y="300">// create EKS (AWS managed Kubernetes cluster)</tspan></tspan><tspan fill="#454658"><tspan x="0" y="319">tx.</tspan><tspan y="319" fill="#ff6240">create_kubernetes</tspan><tspan y="319">(&amp;eks);</tspan><tspan x="0" y="338"></tspan></tspan><tspan fill="#a8a8c1"><tspan x="0" y="357">// create the infrastructure and wait for the result</tspan></tspan><tspan x="0" y="376">match</tspan><tspan y="376" xml:space="preserve" fill="#454658"> tx.</tspan><tspan y="376" fill="#ff6240">commit()</tspan><tspan y="376" xml:space="preserve" fill="#454658"> { </tspan><tspan fill="#454658"><tspan x="0" y="395" xml:space="preserve">    TransactionResult::</tspan><tspan y="395" fill="#43c9d5">Ok</tspan><tspan y="395"> </tspan><tspan y="395" fill="#b160f0">=&gt;</tspan><tspan y="395"> </tspan><tspan y="395" fill="#43c9d5">println!</tspan><tspan y="395">(&quot;</tspan><tspan y="395" fill="#4548b0">OK</tspan><tspan y="395">&quot;),</tspan><tspan x="0" y="414" xml:space="preserve">    TransactionResult::</tspan><tspan y="414" fill="#ff6240">Rollback</tspan><tspan y="414">(commit_err)</tspan><tspan y="414" xml:space="preserve" fill="#b160f0"> =&gt;</tspan><tspan y="414" xml:space="preserve"> println!(&quot;</tspan><tspan y="414" fill="#5d64d2">ERROR but rollback OK</tspan><tspan y="414">&quot;), </tspan><tspan x="0" y="433" xml:space="preserve">    TransactionResult::</tspan><tspan y="433" fill="#ff6240">UnrecoverableError</tspan><tspan y="433">(commit_err, rollback_err) </tspan><tspan y="433" fill="#b160f0">=&gt; </tspan><tspan y="433">println!(&quot;</tspan><tspan y="433" fill="#5d64d2">FATAL ERROR</tspan><tspan y="433">&quot;)</tspan></tspan></text>
    </g>
  </g>
</svg>
